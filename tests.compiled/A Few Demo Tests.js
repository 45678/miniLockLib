// Generated by CoffeeScript 1.8.0
(function() {
  var Alice, Bobby, miniLockLib, read, tape, _ref, _ref1;

  _ref = require("./test_setup"), tape = _ref.tape, miniLockLib = _ref.miniLockLib;

  _ref1 = require("./fixtures"), Alice = _ref1.Alice, Bobby = _ref1.Bobby, read = _ref1.read;

  tape("A demo of miniLockLib.encrypt & miniLockLib.decrypt", function(test) {
    return test.end();
  });

  tape("Encrypt a version 1 file for Alice", function(test) {
    return read("basic.txt", function(blob) {
      return miniLockLib.encrypt({
        version: 1,
        data: blob,
        name: "alice.txt.v1",
        keys: Alice.keys,
        miniLockIDs: [Alice.miniLockID],
        callback: function(error, encrypted) {
          if (error != null) {
            return test.end(error);
          }
          test.ok(encrypted.name === "alice.txt.v1.minilock");
          test.same(encrypted.data.size, 962);
          test.ok(encrypted.data.type === "application/minilock");
          test.ok(encrypted.senderID === Alice.miniLockID);
          return test.end();
        }
      });
    });
  });

  tape("Encrypt a version 2 file for Alice", function(test) {
    return read("basic.txt", function(blob) {
      return miniLockLib.encrypt({
        version: 2,
        data: blob,
        name: "alice.txt.v2",
        keys: Alice.keys,
        miniLockIDs: [Alice.miniLockID],
        callback: function(error, encrypted) {
          if (error != null) {
            return test.end(error);
          }
          test.same(encrypted.name, "alice.txt.v2.minilock");
          test.same(encrypted.data.size, 962 + 128 + 24);
          test.same(encrypted.data.type, "application/minilock");
          test.same(encrypted.senderID, Alice.miniLockID);
          return test.end();
        }
      });
    });
  });

  tape("Alice can decrypt version 1 file that was encrypted for her", function(test) {
    return read("alice.txt.v1.minilock", function(blob) {
      return miniLockLib.decrypt({
        data: blob,
        keys: Alice.keys,
        callback: function(error, decrypted) {
          if (error) {
            return test.end(error);
          }
          test.same(decrypted.data.size, 20);
          test.same(decrypted.name, "alice.txt.v1");
          test.same(decrypted.senderID, Alice.miniLockID);
          test.same(decrypted.recipientID, Alice.miniLockID);
          return test.end();
        }
      });
    });
  });

  tape("Alice can decrypt version 2 file that was encrypted for her", function(test) {
    return read("alice.txt.v2.minilock", function(blob) {
      return miniLockLib.decrypt({
        data: blob,
        keys: Alice.keys,
        callback: function(error, decrypted) {
          if (error) {
            return test.end(error);
          }
          test.same(decrypted.data.size, 20);
          test.same(decrypted.name, "alice.txt.v2");
          test.same(decrypted.type, "text/plain");
          test.same(decrypted.time, "2014-08-17T07:06:50.095Z");
          test.same(decrypted.senderID, Alice.miniLockID);
          test.same(decrypted.recipientID, Alice.miniLockID);
          return test.end();
        }
      });
    });
  });

  tape("Bobby can’t decrypt file that was only encrypted for Alice", function(test) {
    return read("alice.txt.minilock", function(blob) {
      return miniLockLib.decrypt({
        data: blob,
        keys: Bobby.keys,
        callback: function(error, decrypted) {
          test.same(error, "Can’t decrypt this file with this set of keys.");
          test.same(decrypted, void 0);
          return test.end();
        }
      });
    });
  });

  tape("Encrypt a file for Alice & Bobby", function(test) {
    return read("basic.txt", function(blob) {
      return miniLockLib.encrypt({
        data: blob,
        name: "alice_and_bobby.txt",
        keys: Alice.keys,
        miniLockIDs: [Alice.miniLockID, Bobby.miniLockID],
        callback: function(error, encrypted) {
          if (error) {
            return test.end(error);
          }
          test.equal(encrypted.name, "alice_and_bobby.txt.minilock");
          test.equal(encrypted.data.size, 1508);
          test.equal(encrypted.data.type, "application/minilock");
          test.equal(encrypted.senderID, Alice.miniLockID);
          return test.end();
        }
      });
    });
  });

  tape("Alice can decrypt file that was encrypted for Alice & Bobby", function(test) {
    return read("alice_and_bobby.txt.minilock", function(blob) {
      return miniLockLib.decrypt({
        data: blob,
        keys: Alice.keys,
        callback: function(error, decrypted) {
          if (error) {
            return test.end(error);
          }
          test.same(decrypted.data.size, 20);
          test.same(decrypted.name, "alice_and_bobby.txt");
          test.same(decrypted.senderID, Alice.miniLockID);
          test.same(decrypted.recipientID, Alice.miniLockID);
          return test.end();
        }
      });
    });
  });

  tape("Bobby can decrypt file that was encrypted for Alice & Bobby", function(test) {
    return read("alice_and_bobby.txt.minilock", function(blob) {
      return miniLockLib.decrypt({
        data: blob,
        keys: Bobby.keys,
        callback: function(error, decrypted) {
          if (error) {
            return test.end(error);
          }
          test.same(decrypted.data.size, 20);
          test.same(decrypted.name, "alice_and_bobby.txt");
          test.same(decrypted.senderID, Alice.miniLockID);
          test.same(decrypted.recipientID, Bobby.miniLockID);
          return test.end();
        }
      });
    });
  });

}).call(this);
