// Generated by CoffeeScript 1.8.0
(function() {
  var Alice, Bobby, tape, _ref;

  tape = require("./tape_test_harness");

  _ref = require("./fixtures"), Alice = _ref.Alice, Bobby = _ref.Bobby;

  tape("Acceptability", function(test) {
    return test.end();
  });

  tape("Alice’s secret phrase is acceptable", function(test) {
    test.ok(miniLockLib.SecretPhrase.isAcceptable(Alice.secretPhrase));
    return test.end();
  });

  tape("Bobby’s secret phrase is acceptable", function(test) {
    test.ok(miniLockLib.SecretPhrase.isAcceptable(Bobby.secretPhrase));
    return test.end();
  });

  tape("Undefined secret phrase is unacceptable", function(test) {
    test.same(miniLockLib.SecretPhrase.isAcceptable(void 0), false);
    return test.end();
  });

  tape("Empty secret phrase is unacceptable", function(test) {
    test.same(miniLockLib.SecretPhrase.isAcceptable(""), false);
    return test.end();
  });

  tape("Blank secret phrase is unacceptable", function(test) {
    test.same(miniLockLib.SecretPhrase.isAcceptable("  "), false);
    return test.end();
  });

  tape("Short secret phrase is unacceptable", function(test) {
    test.same(miniLockLib.SecretPhrase.isAcceptable("My password is password"), false);
    return test.end();
  });

  tape("Alice’s email address is acceptable", function(test) {
    test.ok(miniLockLib.EmailAddress.isAcceptable(Alice.emailAddress));
    return test.end();
  });

  tape("Bobby’s email address is acceptable", function(test) {
    test.ok(miniLockLib.EmailAddress.isAcceptable(Bobby.emailAddress));
    return test.end();
  });

  tape("Empty email address is unacceptable", function(test) {
    test.same(miniLockLib.EmailAddress.isAcceptable(""), false);
    return test.end();
  });

  tape("Blank email address is unacceptable", function(test) {
    test.same(miniLockLib.EmailAddress.isAcceptable("  "), false);
    return test.end();
  });

  tape("Undefined email address is unacceptable", function(test) {
    test.same(miniLockLib.EmailAddress.isAcceptable(void 0), false);
    return test.end();
  });

  tape("Alice’s ID is acceptable", function(test) {
    test.same(miniLockLib.ID.isAcceptable(Alice.miniLockID), true);
    return test.end();
  });

  tape("Bobby’s ID is acceptable", function(test) {
    test.same(miniLockLib.ID.isAcceptable(Alice.miniLockID), true);
    return test.end();
  });

  tape("Undefined ID is unacceptable", function(test) {
    test.same(miniLockLib.ID.isAcceptable(undefined), false);
    return test.end();
  });

  tape("Blank ID is unacceptable", function(test) {
    test.same(miniLockLib.ID.isAcceptable(""), false);
    test.same(miniLockLib.ID.isAcceptable(" "), false);
    test.same(miniLockLib.ID.isAcceptable("  "), false);
    return test.end();
  });

  tape("Truncated ID is unacceptable", function(test) {
    test.same(miniLockLib.ID.isAcceptable(Alice.miniLockID.slice(0, -1)), false);
    test.same(miniLockLib.ID.isAcceptable(Alice.miniLockID.slice(1)), false);
    return test.end();
  });

  tape("ID with extra characters is unacceptable", function(test) {
    test.same(miniLockLib.ID.isAcceptable(Alice.miniLockID + "A"), false);
    test.same(miniLockLib.ID.isAcceptable("A" + Alice.miniLockID), false);
    return test.end();
  });

}).call(this);
