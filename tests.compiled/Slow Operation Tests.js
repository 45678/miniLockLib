// Generated by CoffeeScript 1.10.0
(function() {
  var Alice, Blob, Bobby, miniLockLib, read, readFromNetwork, ref, ref1, tape;

  ref = require("./test_setup"), tape = ref.tape, miniLockLib = ref.miniLockLib;

  Blob = (typeof window !== "undefined" && window !== null ? window.Blob : void 0) || require("../library.compiled/Blob");

  ref1 = require("./fixtures"), Alice = ref1.Alice, Bobby = ref1.Bobby, read = ref1.read, readFromNetwork = ref1.readFromNetwork;

  tape("Slow Operations", function(test) {
    return test.end();
  });

  tape("decrypt 1MB file for Alice", function(test) {
    return readFromNetwork("1MB.tiff.for.Alice.minilock", function(blob) {
      var operation;
      operation = new miniLockLib.DecryptOperation({
        data: blob,
        keys: Alice.keys
      });
      return operation.start(function(error, decrypted) {
        if (error != null) {
          return test.end(error);
        }
        test.ok(decrypted.data.size === 1048826);
        test.ok(decrypted.name === "1MB.tiff");
        test.ok(decrypted.senderID === Alice.miniLockID);
        test.ok(decrypted.recipientID === Alice.miniLockID);
        test.end();
        return console.info("decrypted", decrypted.name, decrypted);
      });
    });
  });

  tape("decrypt 4MB file for Alice", function(test) {
    return readFromNetwork("4MB.tiff.for.Alice.minilock", function(blob) {
      var operation;
      operation = new miniLockLib.DecryptOperation({
        data: blob,
        keys: Alice.keys
      });
      return operation.start(function(error, decrypted) {
        if (error != null) {
          return test.end(error);
        }
        test.ok(decrypted.data.size === 4194746);
        test.ok(decrypted.name === "4MB.tiff");
        test.ok(decrypted.senderID === Alice.miniLockID);
        test.ok(decrypted.recipientID === Alice.miniLockID);
        test.end();
        return console.info("decrypted", decrypted.name, decrypted);
      });
    });
  });

  tape("encrypt 1MB file for Alice", function(test) {
    return readFromNetwork("1MB.tiff", function(blob) {
      var operation;
      operation = new miniLockLib.EncryptOperation({
        data: blob,
        name: "alice.1MB.tiff",
        keys: Alice.keys,
        miniLockIDs: [Alice.miniLockID]
      });
      return operation.start(function(error, encrypted) {
        if (error != null) {
          return test.end(error);
        }
        test.ok(encrypted.data.size === 1049788);
        test.ok(encrypted.name === "alice.1MB.tiff.minilock");
        test.ok(encrypted.senderID === Alice.miniLockID);
        test.end();
        return console.info("encrypted", encrypted.name, encrypted);
      });
    });
  });

  tape("encrypt 4MB file for Alice", function(test) {
    return readFromNetwork("4MB.tiff", function(blob) {
      var operation;
      operation = new miniLockLib.EncryptOperation({
        data: blob,
        name: "alice.4MB.tiff",
        keys: Alice.keys,
        miniLockIDs: [Alice.miniLockID]
      });
      return operation.start(function(error, encrypted) {
        if (error != null) {
          return test.end(error);
        }
        test.ok(encrypted.data.size === 4195768);
        test.ok(encrypted.name === "alice.4MB.tiff.minilock");
        test.ok(encrypted.senderID === Alice.miniLockID);
        test.end();
        return console.info("encrypted", encrypted.name, encrypted);
      });
    });
  });

}).call(this);
